require 'rake/clean'
require 'pp'
require 'yaml'
require 'securerandom'
require 'fileutils'
require 'beaker-hostgenerator'
require 'beaker/dsl/install_utils'
extend Beaker::DSL::InstallUtils

REPO="puppet-agent"
REPO_CONFIGS_DIR = "repo-configs"
CLEAN.include('tmp', 'log', 'junit')

DEFAULT_AGENT_TEST_TARGET = 'windows2012r2-64a'
DEFAULT_MASTER_TEST_TARGET = 'redhat7-64ma'
DEFAULT_TEST_TARGETS = "#{DEFAULT_MASTER_TEST_TARGET}-#{DEFAULT_AGENT_TEST_TARGET}"

DEFAULT_INTERNAL_DOWNLOAD_URL = "http://builds.delivery.puppetlabs.net"
DEFAULT_NIGHTLIES_DOWNLOAD_URL = "http://nightlies.puppet.com"

module HarnessOptions

  DEFAULTS = {
    :type => 'aio',
    :helper => ['lib/helper.rb'],
    :tests  => ['tests'],
    :log_level => 'debug',
    :color => false,
    :root_keys => true,
    :ssh => {
      :keys => ["~/.ssh/id_rsa-acceptance"],
    },
    :xml => true,
    :timesync => false,
    :repo_proxy => true,
    :add_el_extras => false,
    :preserve_hosts => 'onfail',
  }

  class Aggregator
    attr_reader :mode

    def initialize(mode)
      @mode = mode
    end

    def get_options(file_path)
      puts file_path
      if File.exists? file_path
        options = eval(File.read(file_path), binding)
      else
        puts "No options file found at #{File.expand_path(file_path)}"
      end
      options || {}
    end

    def get_mode_options
      get_options("./config/#{mode}/options.rb")
    end

    def get_local_options
      get_options("./local_options.rb")
    end

    def final_options(intermediary_options = {})
      mode_options = get_mode_options
      local_overrides = get_local_options
      final_options = DEFAULTS.merge(mode_options)
      final_options.merge!(intermediary_options)
      final_options.merge!(local_overrides)
      return final_options
    end
  end

  def self.options(mode, options)
    final_options = Aggregator.new(mode).final_options(options)
    final_options
  end
end


def beaker_test(mode = :aio, options = {})
  set_environment_variables_for_install(options[:install_released_packages])
  final_options = HarnessOptions.options(mode, options)

  options_file = 'merged_options.rb'
  File.open(options_file, 'w') do |merged|
    merged.puts <<-EOS
# Copy this file to local_options.rb and adjust as needed if you wish to run
# with some local overrides.
EOS
    merged.puts(final_options.pretty_inspect)
  end

  tests = ENV['TESTS'] || ENV['TEST']
  tests_opt = "--tests=#{tests}" if tests

  if config and File.exists?(config)
    config_opt = "--hosts=#{config}"
  else
    agent_target = ENV['TEST_TARGET'] || DEFAULT_AGENT_TEST_TARGET
    master_target = ENV['MASTER_TEST_TARGET'] || DEFAULT_MASTER_TEST_TARGET
    targets = "#{master_target}-#{agent_target}"

    cli = BeakerHostGenerator::CLI.new([targets, '--disable-default-role', '--osinfo-version', '1'])
    ENV['BEAKER_HOSTS'] = "tmp/#{targets}-#{SecureRandom.uuid}.yaml"
    FileUtils.mkdir_p('tmp')
    File.open(config, 'w') do |fh|
      fh.print(cli.execute)
    end
    config_opt = "--hosts=#{config}"
  end

  overriding_options = ENV['OPTIONS']

  args = ["--options-file", options_file, config_opt, tests_opt, overriding_options].compact

  begin
    sh("beaker", *args)
  ensure
    if (hosts_file = config || final_options[:hosts_file]) && hosts_file !~ /preserved_config/
      cp(hosts_file, "log/latest/config.yml")
      generate_config_for_latest_hosts if final_options[:preserve_hosts] || overriding_options =~ /--preserve-hosts/
    end
    mv(options_file, "log/latest")
    puts "\n\n"
  end
end

def generate_config_for_latest_hosts
  preserved_config_hash = { 'HOSTS' => {} }

  config_hash = YAML.load_file('log/latest/config.yml').to_hash
  nodes = config_hash['HOSTS'].map do |node_label,hash|
    { :node_label => node_label, :platform => hash['platform'] }
  end

  pre_suite_log = File.read('log/latest/pre_suite-run.log')
  nodes.each do |node_info|
    possible_hostname_match = /^(\w+) \(#{node_info[:node_label]}\)/.match(pre_suite_log)
    hostname = (possible_hostname_match || Array.new)[1]
    fqdn = hostname ? "#{hostname}.delivery.puppetlabs.net" : "unknown"
    preserved_config_hash['HOSTS'][fqdn] = {
      'roles' => [ 'agent'],
      'platform' => node_info[:platform],
    }
    preserved_config_hash['HOSTS'][fqdn]['roles'].unshift('master') if node_info[:node_label] =~ /master/
  end

  puts "\n\n"
  pp preserved_config_hash
  puts "\n\n"

  File.open('log/latest/preserved_config.yaml', 'w') do |config_file|
    YAML.dump(preserved_config_hash, config_file)
  end
rescue Errno::ENOENT => e
  puts "Couldn't generate log #{e}"
end

def config
  ENV['BEAKER_HOSTS']
end

def set_environment_variables_for_install(install_released_packages)
  if ENV['SHA'].nil?
    fail "Required environment variable SHA is not set. Try `rake help` for usage."
  end

  ENV['AGENT_DOWNLOAD_URL'] ||= DEFAULT_INTERNAL_DOWNLOAD_URL
  ENV['SERVER_DOWNLOAD_URL'] ||= DEFAULT_NIGHTLIES_DOWNLOAD_URL
  ENV['SERVER_VERSION'] ||= 'latest'

  # We can only use a SHAs of "latest" if we're downloading from nightlies, as
  # our other options, such as 'builds.delivery.puppetlabs.net', do not have
  # "latest" directories.
  if ENV['SHA'] == 'latest' and ENV['AGENT_DOWNLOAD_URL'] != DEFAULT_NIGHTLIES_DOWNLOAD_URL
    fail "Can only use ENV['SHA'] == 'latest' if ENV['AGENT_DOWNLOAD_URL'] == '#{DEFAULT_NIGHTLIES_DOWNLOAD_URL}'"
  end

  if ENV['SERVER_VERSION'] == 'latest' and ENV['SERVER_DOWNLOAD_URL'] != DEFAULT_NIGHTLIES_DOWNLOAD_URL
    fail "Can only use ENV['SERVER_VERSION'] == 'latest' if ENV['SERVER_DOWNLOAD_URL'] == '#{DEFAULT_NIGHTLIES_DOWNLOAD_URL}'"
  end

  # If this is a test of public / final release packages,
  # TESTING_RELEASED_PACKAGES is a string value we use to tell the
  # puppet agent pre-suite that we're testing public release packages, not dev
  # packages. This is not part of the 'public' configuration.
  if install_released_packages
    ENV['TESTING_RELEASED_PACKAGES'] = 'true'
  end
end


USAGE = <<-EOS
rake acceptance

USAGE
  Required Settings or Environment Variables
    SHA='sha'
       Supply git ref (sha or tag) of packages of #{REPO} to be put under test.
       Also supports the literal string 'latest' which references the latest
       build on #{DEFAULT_NIGHTLIES_DOWNLOAD_URL}.
       If setting SHA to 'latest', you must also set ENV['AGENT_DOWNLOAD_URL'] to
       #{DEFAULT_NIGHTLIES_DOWNLOAD_URL}.

  Optional Settings or Environment Variables
    BEAKER_HOSTS=config/nodes/foo.yaml
      Supply the path to a yaml file in the format of a beaker hosts file containing
      the test targets, roles, etc., or specify it in a beaker options.rb file.

    TEST_TARGET='beaker-hostgenerator target'
      Supply a test target in the form beaker-hostgenerator accepts, e.g.
      ubuntu1504-64a. Defaults to #{DEFAULT_AGENT_TEST_TARGET}.

    MASTER_TEST_TARGET='beaker-hostgenerator target'
      Override the default master test target in the form beaker-hostgenerator
      accepts, e.g. ubuntu1504-64a. Defaults to #{DEFAULT_MASTER_TEST_TARGET}.

    SERVER_VERSION='SHA'
      Supply git ref (sha or tag) of Puppet Server to use in testing. If no
      SERVER_VERSION is provided, the latest nightly build of Puppet Server
      will be used from #{DEFAULT_NIGHTLIES_DOWNLOAD_URL}.

    AGENT_DOWNLOAD_URL='http://example.com'
      Supply the url of the host serving packages of #{REPO} to test matching
      `SHA`. Ignored by `rake acceptance:released` which always downloads from
      public production Puppet repositories.
      Valid values are:
        * #{DEFAULT_INTERNAL_DOWNLOAD_URL} (Puppet internal builds)
        * #{DEFAULT_NIGHTLIES_DOWNLOAD_URL} (Puppet public nightly builds)

      Default: #{DEFAULT_INTERNAL_DOWNLOAD_URL}.

    SERVER_DOWNLOAD_URL='http://example.com'
      Supply the url of the host serving packages of puppet server to test
      against packages of #{REPO}. Ignored by `rake acceptance:released` which
      always downloads from public production Puppet repositories.
      Valid values are:
        * #{DEFAULT_INTERNAL_DOWNLOAD_URL} (Puppet internal builds)
        * #{DEFAULT_NIGHTLIES_DOWNLOAD_URL} (Puppet public nightly builds)

      Default: #{DEFAULT_NIGHTLIES_DOWNLOAD_URL}

    TESTS='path/to/test,and/more/tests'
      Supply a comma-separated string (no spaces) of specific test(s) to run.
      All pre-suites will be run, unless a specific pre-suite file is supplied as the
      value to this option, in which case test exercise will terminate after the
      supplied pre-suite file.

    OPTIONS='--more --options'
      Supply additional options to pass to the beaker invocation

If there is a Beaker options hash in a ./local_options.rb, it will be included.
Commandline options set through the above environment variables will override
settings in this file.
EOS

namespace :acceptance do
  desc <<-EOS
  Run acceptance tests against released packages from public production Puppet repos with Beaker
  #{USAGE}
  EOS
  task :released do
    beaker_test(:aio, :install_released_packages => true)
  end

  desc <<-EOS
  Run acceptance tests against development unreleased packages from testing repos with Beaker
  #{USAGE}
  EOS
  task :development do
    beaker_test(:aio) 
  end

  desc <<-EOS
  Run an acceptance test for a given node configuration and preserve the hosts.
  #{USAGE}
  EOS
  task :test_and_preserve_hosts do
    beaker_test('aio', :preserve_hosts => 'always', :__preserve_config__ => true)
  end
end

desc <<-EOS
Show environment variable usage help output for running acceptance tests.
EOS
task :help do
  puts "#{USAGE}"
end

task :default do
  sh('rake -T')
end

